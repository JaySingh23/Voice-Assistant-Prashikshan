SOCKET PROGRAMMING: First, we must know the concept of both the server and the client. 
A server is a software that waits for client requests and serves or processes them accordingly. On the other hand, a client is requester of this service. 
A client program request for some resources to the server and server responds to that request.

Socket programming is a way of connecting two nodes on a network to communicate with each other. 
Sockets (or socket programming) is a program that enables two sockets to send and receive data, bi-directionally, at any given moment. 
One socket (node) listens on a particular port at an IP, while other socket reaches out to the other to form a connection. 
Server forms the listener socket while client reaches out to the server. 
The primary socket API functions and methods in this module are: 
socket() 
bind()  
listen() 
accept() 
connect() 
send() 
close()

STAGES OF SOCKET PROGRAMMING:
The steps involved in establishing a socket on the client side are as follows:
1. Create a socket with the socket() system call
2. Connect the socket to the address of the server using the connect() system call
3. Send and receive data. There are a number of ways to do this, but the simplest is to use the read() and write() system calls. 

The steps involved in establishing a socket on the server side are as follows:
1. Create a socket with the socket() system call
2. Bind the socket to an address using the bind() system call. For a server socket on the Internet, an address consists of a port number on the host machine.
3. Listen for connections with the listen() system call
4. Accept a connection with the accept() system call. This call typically blocks until a client connects with the server.
5. Send and receive data.

CODE: We have to make two files, one for the server and another for client. 

SERVER: server.py 

import socket 
s=socket.socket(socket.AF_INET,sockt.SOCK_STREAM) 
s.bind((socket.gethostname(),1024)) 
s.listen(5) 
while True: 
  clt,adr=s.accept()
  print(f”Connection to (adr) established”) 
  clt.send(bytes(“Hello World”, “utf-8”)) 
  clt.close()
  
CLIENT: client.py 

import socket s=socket.socket(socket.AF_INET,sockt.SOCK_STREAM) 
s.connect((socket.gethostname(),1024)) 
complete_message= ‘ ’ 
while True: 
  msg=s.recv(5) 
  if len(msg)<=0: 
  break 
  complete_message += msg.decode(“utf-8”) 
print(complete_message)


Beautiful soup:
It is a Python library for pulling data out of HTML and XML files. It works with your avorite parser to provide idiomatic ways of navigating, searching, and modifying the
parse tree. It commonly saves programmers hours or days of work. hese instructions illustrate all major features of Beautiful Soup 4, with examples. Here show you what the 
library is good for, how it works, how to use it, how to make it do what you want, and what to do when it violates your expectations.

Here are some functions used in it:

soup.title:
# <title>The Dormouse's story</title>

soup.title.name:
# u'title'

soup.title.string
# u'The Dormouse's story'

soup.title.parent.name
# u'head'

soup.p
# <p class="title"<b>The Dormouse's story</b></p>

soup.p['class']
# u'title'

soup.a
# <a class = "sister" href ="http://example.com/elsie" id="link1"> Elsie </a>

soup.find_all('a')
# [<a class = "sister" href ="http://example.com/elsie" id="link1"> Elsie </a>,
# <a class = "sister" href ="http://example.com/lacie" id="link2"> Lacie </a>,
# <a class = "sister" href ="http://example.com/tillie" id="link3"> Tillie </a>]

soup.find(id="link3")
# <a class = "sister" href ="http://example.com/tillie" id="link3"> Tillie </a>
